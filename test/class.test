UTest({

	'inheritance': function() {
	  
		function Animal() {
			this.type = 'animal';
			this.types = [1];
		}

		function Pet() {
			this.home = true;
		}

		var Tiger = Class({
			Base: Animal,
			Construct: function(nick) {
				this.name = 'Tiger';
				this.arr = [1, 2, 3];
				this.nick = nick
			},
			log: function() {
				console.log('TigerSays: ', this.name);
			},
			getType: function() {
				return 'Tiger';
			}
		});

		var Region = Class({
			Construct: function() {
				this.region = 'Africa';
			}
		});

		var AngryTiger = Class({
			Base: Tiger,
			Extends: Region,
			Construct: function() {

			},
			feature: 'angry',
			log: function() {
				Tiger.prototype.log.apply(this, arguments);
			}
		});


		var tiger = new Tiger();
		var angry = new AngryTiger('Zlostik');


		eq(tiger instanceof Tiger, true, 'Error: Tiger not Tiger');
		eq(tiger instanceof Animal, true, 'Error: Tiger not Animal');
		eq(tiger instanceof Object, true, 'Error: Tiger not Object');

		eq(tiger.type == 'animal', true, 'Error: Type not Animal');
		eq(tiger.name == 'Tiger', true, 'Error: Tiger name is not Tiger!');


		eq(angry instanceof Tiger, true, 'Error: Angry not Tiger');
		eq(angry instanceof Animal, true, 'Error: Angry not Animal');
		eq(tiger instanceof Object, true, 'Error: Angry not Object');

		eq(angry.feature == 'angry', true, 'Error: Feature not angry');
		eq(angry.name == 'Tiger', true, 'Error: AngryTiger"s name is not Tiger!');
		eq(angry.region == 'Africa', true, 'Error: AngryTiger is not from Africa!');



		eq(angry.nick == 'Zlostik', true, 'Error: Nick not Zlostik');
		eq(angry.getType != null, true, 'Error: getType is not Tiger');



		eq(tiger.constructor === Tiger, true, 'Error: Tigers constructor is not Tiger');

		eq(angry.constructor === AngryTiger, true, 'Error: AngryTigers constructor is not AngryTiger');


		var A = Class({});

		var B = Class({
			Base: A
		});

		var C = Class({
			Base: B,
			toString: function() {}
		})

		var a = new A();
		var b = new B();
		var c = new C();
		eq(a.constructor === A, true, 'Error: A constructor is not A');
		eq(b.constructor === B, true, 'Error: B constructor is not B');
		eq(c.constructor === C, true, 'Error: C constructor is not C');

	},

	'static inheritance': function() {
		  var foo = Class({
			  Static: {
				  foo: function(){}
			  }
		  });
		  
		  var bar = Class({
			  Base: foo,
			  Static: {
				  bar: function(){}
			  }
		  });
		  
		  var baz = Class({
			  Extends: [foo, bar],
			  Static: {
				  baz: function(){}
			  }
		  });
		  
		  eq(typeof bar.foo, 'function');
		  eq(typeof bar.bar, 'function');
		  
		  eq(typeof baz.foo, 'function');
		  eq(typeof baz.bar, 'function');
		  eq(typeof baz.baz, 'function');
	}
});
