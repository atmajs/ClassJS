UTest({

	'inheritance' () {
	  
		function Animal() {
			this.type = 'animal';
			this.types = [1];
		}
		function Pet() {
			this.home = true;
		}
		var Tiger = Class({
			Base: Animal,
			Construct: function(nick) {
				this.name = 'Tiger';
				this.arr = [1, 2, 3];
				this.nick = nick
			},
			log: function() {
				console.log('TigerSays: ', this.name);
			},
			getType: function() {
				return 'Tiger';
			}
		});

		var Region = Class({
			Construct: function() {
				this.region = 'Africa';
			}
		});

		var AngryTiger = Class({
			Base: Tiger,
			Extends: Region,
			Construct: function() {

			},
			feature: 'angry',
			log: function() {
				Tiger.prototype.log.apply(this, arguments);
			}
		});


		var tiger = new Tiger();
		var angry = new AngryTiger('Zlostik');

		is_(tiger, Tiger);
		is_(tiger, Animal);
		is_(tiger, Object);
		
		eq_(tiger.type, 'animal', 'Error: Type not Animal');
		eq_(tiger.name, 'Tiger', 'Error: Tiger name is not Tiger!');


		is_(angry, Tiger);
		is_(angry, Animal);
		is_(angry, Object);
		

		eq_(angry.feature , 'angry',  'Error: Feature not angry');
		eq_(angry.name , 'Tiger',  'Error: AngryTiger"s name is not Tiger!');
		eq_(angry.region , 'Africa',  'Error: AngryTiger is not from Africa!');

		eq_(angry.nick, 'Zlostik', 'Error: Nick not Zlostik');
		is_(angry.getType, 'Function', 'Error: getType is not Tiger');



		eq_(tiger.constructor, Tiger, 'Error: Tigers constructor is not Tiger');
		eq_(angry.constructor, AngryTiger, 'Error: AngryTigers constructor is not AngryTiger');


		var A = Class({});
		var B = Class({
			Base: A
		});
		var C = Class({
			Base: B,
			toString: function() {}
		})

		var a = new A();
		var b = new B();
		var c = new C();
		eq_(a.constructor , A,  'Error: A constructor is not A');
		eq_(b.constructor , B,  'Error: B constructor is not B');
		eq_(c.constructor , C,  'Error: C constructor is not C');

	},

	'static inheritance' () {
		var foo = Class({
			Static: {
				foo: function(){},
				fooRgx: /foo/,
				get: function(){
					return 'foo';
				}
			}
		});
		
		var bar = Class({
			Base: foo,
			Static: {
				bar: function(){},
				barRgx: /bar/,
				get: function(){
					return 'bar';
				}
			}
		});
		
		var baz = Class({
			Extends: [foo, bar],
			Static: {
				baz: function(){},
				get: function(){
					return 'baz';
				}
			}
		});
		
		is_(bar.foo, 'Function');
		is_(bar.bar, 'Function');
		is_(bar.fooRgx, 'RegExp');
		is_(bar.barRgx, 'RegExp');
		
		is_(baz.foo, 'Function');
		is_(baz.bar, 'Function');
		is_(baz.baz, 'Function');
		
		eq_(foo.get(), 'foo');
		eq_(bar.get(), 'bar');
		eq_(baz.get(), 'baz');
		
	},
	'static getters' () {
		var name = 'avoid';
		var Foo = Class({
			Static: {
				get Name () {
					return name;
				}
			}
		});
		var Baz = Class({
			Base: Foo,
			Static: {
				get BazName () {
					return 'baz' + name
				}
			}
		});
		
		name = 'Foo';
		eq_(Foo.Name, 'Foo');
		eq_(Baz.Name, 'Foo');
		eq_(Baz.BazName, 'bazFoo');
		
		name = 'Baz';
		eq_(Foo.Name, 'Baz');
		eq_(Baz.Name, 'Baz');
		eq_(Baz.BazName, 'bazBaz');
	}
});
