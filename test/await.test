
include
	.inject(
		'/src/vars.js',
		'/src/util/function.js',
		'/src/util/array.js',
		'/src/business/Deferred.js::Deferred',
		'/src/business/Await.js::Await'
	)
	.done(function() {


	function delegate(response, timeout, callback) {

		setTimeout(function() {

			callback.apply(null, response);

		}, timeout);
	}

	function defer(response, timeout, dfr) {
		
		setTimeout(function() {

			if (response[0]){
				return dfr.reject(response[0]);
			}
			
			response.shift();
			
			dfr.resolve.apply(dfr, response);
		}, timeout)

	}

	UTest({
		'delegate': function(done) {
			
			var await = new Await;
			
			delegate([], 20, await.delegate());
			eq_(await._wait, 1);
			
			delegate([], 40, await.delegate());
			eq_(await._wait, 2);
			
			var x = 1;
			await.always(function(){
				x = 0;
				eq_(await._wait, 0);
				done();
			});
			
			eq_(await._wait, 2);
			eq_(x, 1);
		},
		
		'delegate - args': function(done) {
			
			var await = new Await;
			
			delegate([null, 'foo'], 20, await.delegate('test'));
			delegate([], 40, await.delegate());
			
			await.done(function(result){
				eq(result.test.arguments[0], 'foo');
				done();
			});
		},
		
		'delegate - args - fail': function(done) {
			
			var await = new Await;
			
			delegate([null, 'foo'], 20, await.delegate('test'));
			delegate(['bar-error'], 40, await.delegate());
			
			await.fail(function(error, result){
				eq(error, 'bar-error');
				eq(result.test.arguments[0], 'foo');
				
				done();
			});
		},
		
		'dfr': function(done){
			
			var await = new Await;
			
			defer([], 20, await.deferred());
			defer([], 40, await.deferred());
			
			await.done(done);
			
		},
		
		'dfr - args': function(done) {
			
			var await = new Await;
			
			defer([null, 'foo'], 20, await.deferred('test'));
			defer([], 40, await.deferred());
			
			await.done(function(result){
				
				eq(result.test.arguments[0], 'foo');
				done();
			});
		},
		
		'dfr - args - fail': function(done) {
			
			var await = new Await;
			
			defer([null, 'foo'], 20, await.deferred('test'));
			defer(['bar-error'], 40, await.deferred());
			
			await.fail(function(error, result){
				eq(error, 'bar-error');
				eq(result.test.arguments[0], 'foo');
				
				done();
			});
		},
		
		'promises': function(done){
			var dfr_1 = new Class.Deferred,
				dfr_2 = new Class.Deferred;
			
			var await = new Class.Await(
				dfr_1.defer(),
				dfr_2.defer()
			);
			
			setTimeout(dfr_1.resolveDelegate(), 100);
			setTimeout(dfr_2.resolveDelegate(), 50);
			
			await
				.done(done);
		}
	})
})