
include
    .inject('../lib/class.node.js')
    .done(function(){
        
        var timestamp = Date.now(),
            User = Class({
                Base: Class.Serializable,
                Store: Class.MongoStore.Single('users'),
                username: '',
                timestamp: 0
            }),
            Users = Class.Collection(User, {
                Store: Class.MongoStore.Collection('users')
            });
            
        
        '> deserialization check'
        eq_(new User({name: 'x'}).name, 'x');
        
        
        UTest({
            $before: function(){
                
                Class
                    .MongoStore
                    .settings({
                        db: 'test-class'
                    });
            },
            $after: function(done){
                
                Class
                    .MongoStore
                    .resolveDb()
                    .done(function(db){
                        
                        db.dropDatabase(function(){
                            db.close(true);
                            done();
                        });
                    });
                    
                
            },
            'ensure-no-foo': function(done){
                
                Users
                    .fetch({
                        username: 'foo'
                    })
                    .done(function(users){
                        
                        if (users.length === 0) {
                            done();
                            return;
                        }
                        
                        users
                            .del()
                            .always(function(){
                                Users
                                    .fetch({ username: 'foo' })
                                    .done(function(users){
                                        eq_(users.length, 0, 'Not removed');
                                        done();
                                    })
                            });
                    });
                  
                
            },
            'write': function(done){
                var user = new User();
                
                user.username = 'foo';
                user.timestamp = timestamp;
                
                user
                    .save()
                    .fail(assert.avoid())
                    .done(user => {
                        is_(user._id, 'Object');
                        done();
                    })
                    ;
                    
            },
            
            'read': function(done){
                
                User
                    .fetch({ username: 'foo' })
                    .done(function(x){
                        eq_(x.timestamp, timestamp);
                        
                        
                        User
                            .fetch({$query: {username: 'foo'}})
                            .done(function(){
                                eq_(x.timestamp, timestamp);
                                
                                User
                                    .fetch({timestamp: timestamp})
                                    .done(function(x){
                                        eq_(x.username, 'foo');
                                        
                                        done();
                                    })
                                
                            })
                    });
            },
            'find-gt': function(done){
                User
                    .fetch({ timestamp: '>' + (timestamp - 20) })
                    .done(function(x){
                        is_(x._id, 'Object');
                        eq_(x.username, 'foo');
                        
                        done();
                        
                    })
            },
            'find-gte': function(done){
                User
                    .fetch({ timestamp: '>=' + timestamp })
                    .done(function(x){
                        is_(x._id, 'Object');
                        eq_(x.username, 'foo');
                        done();
                    })
            },
            'find-none-gt': function(done){
                User
                    .fetch({ timestamp: '>' + (timestamp + 20) })
                    .done(assert.avoid())
                    .fail(function(error){
                        deepEq_(error, {
                            code: 404,
                            message: 'Entry Not Found'
                        });
                        done();
                    })
            },
            'count': function(done){
                Users
                    .count()
                    .fail(assert.avoid())
                    .done(function(count){
                        eq_(count, 1);
                        done();
                    })
            },
            'remove': function(done){
                User
                    .fetch({ username: 'foo' })
                    .done(function(x){
                        x
                            .del()
                            .always(function(){
                                
                                User
                                    .fetch({ username: 'foo' })
                                    .done(assert.avoid())
                                    .fail(function(error){
                                        eq_(error.code, 404);
                                        done();
                                    })
                            })
                        
                        
                    });
            },
            
            'write-collection' () {
                var count = 300,
                    users = new Users();
                
                while(--count > -1){
                    users.push({
                        username: 'foo',
                        timestamp: count
                    });
                }                
                return users
                    .save()
                    .fail(assert.avoid())
                    .pipe(() => Users
                        .fetch({timestamp: '>=150'})
                        .done(users => {
                            eq_(users.length, 150);
                            is_(users[0]._id, 'Object');
                        })
                    );
            },
            
            'indexes': function(done){
                var User = Class({
                    Base: Class.Serializable,
                    Store: Class.MongoStore.Single({
                        collection: 'user-index',
                        primaryKey: 'username',
                        indexes: [
                            { timestamp: 1 }
                        ]
                    }),
                    username: '',
                    timestamp: 0
                });
                
                Class
                    .MongoStore
                    .ensureIndexes(User)
                    .done(checkIndexes)
                    .fail(assert.avoid(done));
                    
                function checkIndexes(args) {
                    Class
                        .MongoStore
                        .resolveCollection('user-index')
                        .done(indexInformation)
                        ;
                }
                
                function indexInformation(coll) {
                     coll.indexInformation({ full: true }, function(err, info){
                        
                        has_(info, [
                            {
                                key: {
                                    username: 1,
                                },
                                unique: true
                            },
                            {
                                key: {
                                    timestamp: 1
                                }
                            }
                        ]);
                        
                        done();
                    });
                }
            },
            
            'direct collection patching': function(done){
                new User({ timestamp: 5 })
                    .save()
                    .fail(assert.avoid())
                    .done(function(user){
                        
                        User
                            .resolveCollection()
                            .done(function(coll){
                                
                                coll.update({
                                    _id: user._id
                                }, {
                                    $inc: {
                                        timestamp: 3
                                    }
                                }, function(error, x){
                                    eq_(error, null);
                                    eq_(x.result.ok, 1);
                                    done();
                                })
                            })
                        
                    })
            },
            
            'profiler': function(done){
                
                Class
                    .MongoStore
                    .profiler
                    .toggle(true, {
                        onDetect: assert.await(function(info){
                            has_(info, {
                                params: {
                                    reason: 'unindexed'
                                },
                                coll: 'users',
                                plan: {
                                    cursor: 'BasicCursor'
                                }
                            });
                            
                            done()
                        })
                    });
                    
                
                User
                    .fetch({ username: 'baz' });
            }
        })
    })