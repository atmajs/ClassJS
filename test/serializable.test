(function() {

	var A = Class({
		Extends: Class.Serializable,
		name: 'A'
	});

	var B = Class({
		Extends: Class.Serializable({
			a: A
		}),
		Construct: function(){
			this.a = new A;
		}
	});

	UTest({
		'serialize': function() {
			
			eq(new A().serialize(), '{"name":"A"}');
			eq(new B().serialize(), '{"a":{"name":"A"}}');
		},
		
		'deserialize': function() {
			
			eq(Class.Serializable.prototype.deserialize.call({}, {name: 'raw'}).name, 'raw');
			
			eq(new A().deserialize('{"name":"aX"}').name, 'aX');
			eq((new A({name: 'aX'})).name, 'aX');
			
			
			var b = new B().deserialize('{"a":{"name":"bX"}}');
			
			assert(b instanceof B);
			assert(b.a instanceof A);
			eq(b.a.name, 'bX');
			
		},
		
		
		'deep': function(){
			
			var Role = Class({
				Base: Class.Serializable,
				
				name: ''
			});
			
			var RoleCollection = Class.Collection(Role, {
				Base: Class.Serializable
			});
			
			
			var roles = new RoleCollection('[{"name":"foo"}]');
			
			
			assert(roles[0] instanceof Role);
			//
			
			var Settings = Class({
				Base: Class.Serializable({
					roles: RoleCollection
				}),
				roles: new RoleCollection
			});
			
			eq(new Settings().serialize(), '{"roles":[]}');
			
			var setts = new Settings('{ "roles":[{"name":"foo"}] }');
			
			
			
			assert(setts.roles instanceof RoleCollection)
			assert(setts.roles[0] instanceof Role);
			
			
			setts.roles.push({name: "bar"});
			eq(setts.serialize(), '{"roles":[{"name":"foo"},{"name":"bar"}]}')
		}
	});

}());