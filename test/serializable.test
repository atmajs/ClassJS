(function() {

	var A = Class({
		Extends: Class.Serializable,
		name: 'A'
	});

	var B = Class({
		Extends: Class.Serializable({
			a: A
		}),
		Construct: function(){
			this.a = new A;
		}
	});

	UTest({
		'serialize': function() {
			
			eq(JSON.stringify(new A()), '{"name":"A"}');
			eq(JSON.stringify(new B()), '{"a":{"name":"A"}}');
		},
		
		'deserialize': function() {
			
			eq(Class.Serializable.deserialize({}, {name: 'raw'}).name, 'raw');
			
			eq(Class.Serializable.deserialize(new A(), '{"name":"aX"}').name, 'aX');
			eq((new A({name: 'aX'})).name, 'aX');
			
			
			var b = Class.Serializable.deserialize(new B(), '{"a":{"name":"bX"}}');
			
			assert(b instanceof B);
			assert(b.a instanceof A);
			eq(b.a.name, 'bX');
			
		},
		
		
		'deep': function(){
			
			var Role = Class({
				Base: Class.Serializable,
				
				name: ''
			});
			
			var RoleCollection = Class.Collection(Role, {
				Base: Class.Serializable
			});
			
			
			var roles = new RoleCollection('[{"name":"foo"}]');
			
			
			assert(roles[0] instanceof Role);
			
			
			var Settings = Class({
				Base: Class.Serializable({
					roles: RoleCollection
				}),
				roles: new RoleCollection
			});
			
			eq(JSON.stringify(new Settings()), '{"roles":[]}');
			
			var setts = new Settings('{ "roles":[{"name":"foo"}] }');
			
			
			
			assert(setts.roles instanceof RoleCollection)
			assert(setts.roles[0] instanceof Role);
			
			
			setts.roles.push({name: "bar"});
			eq(JSON.stringify(setts), '{"roles":[{"name":"foo"},{"name":"bar"}]}')
		},
		
		
		'class-repository': function(){
			
			var Foo = Class('Foo', {
				Base: Class.Serializable,
				number: null,
				add: function(x){
					return this.number + x;
				}
			});
			
			var foo = new Foo({number: 5}),
				str = Class.stringify(foo);
			
			eq(str, '{"json":{"number":5},"__$class__":"Foo"}');
			
			foo = Class.parse(str);
			
			
			eq(foo.number, 5)
			eq(typeof foo.add, 'function');
			eq(foo.add(5), 10);
			
			
			var Foos = Class.Collection('Foos', Foo, {
					Base: Class.Serializable,
				}),
				foos = new Foos;
			
			foos.push({
				number: 3
			});
			
			
			str = Class.stringify(foos);
			eq(str, '{"json":[{"number":3}],"__$class__":"Foos"}');
			
			foos = Class.parse(str);
			
			eq(foos.length, 1);
			eq(foos[0].number, 3);
			eq(foos[0].add(2), 5);
		},
		
		'serialization with meta': function(){
			var A = Class({
				Base: Class.Serializable({
					'a': {
						key: 'A'
					},
					'c': {
						serialize: null
					}
				}),
				
				a: '',
				c: ''
			});
			
			var B = Class({
				Base: Class.Serializable({
					'a': A,
					'b': {
						key: 'B'
					},
					'd': {
						serialize: null
					}
				})
			})
			
			var a = new A({A: '/a', c: '/c', b: '/b'});
			eq_(a.a, '/a');
			eq_(a.A, null);
			deepEq_(a.toJSON(), {
				A: '/a',
				b: '/b'
			});
			
			var b = new B({
				a: {
					A: '/a',
					c: '/c'
				},
				b: '/b',
				d: '/d'
			});
			eq_(b.a.a, '/a');
			eq_(b.a.A, null);
			deepEq_(b.toJSON(), {
				a: {
					A: '/a'
				},
				B: '/b'
			});
			
			var str_b = JSON.stringify(b);
			has_(new B(str_b), {
				a: {
					a: '/a'
				},
				b: '/b'
			});
		},
		
		'serialize by IoC repo': function(){
			var Foo = Class('Foo', {
				Base: Class.Serializable,
				
				a: 1,
				b: 3,
				val: function(){ return this.a + this.b; }
			});
			
			var Bar = Class({
				Base: Class.Serializable({
					foo: 'Foo'
				})
			});
			
			var bar = new Bar({
				foo: { a: 10 }
			});
			
			is_(bar.foo.val, 'Function');
			eq_(bar.foo.a, 10);
			eq_(bar.foo.b, 3);
			eq_(bar.foo.val(), 13);
		},
		
		'mixed inheritance': function(){
			var Foo = Class({
				Base: Class.Serializable({
					foo: Date
				})
			});
			var Baz = Class({
				Base: Foo,
				Extends: Class.Serializable({
					baz: Date,
				})
			});
			
			var date_foo = new Date(2014, 1, 1),
				date_baz = new Date(2014, 2, 1);
			
			var baz = new Baz({
				foo: date_foo.toString(),
				baz: date_baz.toString()
			});
			
			is_(baz.foo, 'Date');
			is_(baz.baz, 'Date');
			deepEq_(baz.foo, date_foo);
			deepEq_(baz.baz, date_baz);
		}
	});

}());