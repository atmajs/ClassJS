
include
	.inject(
		'/src/vars.js',
		'/src/util/function.js',
		'/src/util/array.js',
		'/src/business/Deferred.js::Deferred',
		'/src/business/Await.js::Await'
	)
	.done(function() {

	function createDfr(doneResult, failResult) {
		var dfr = new Deferred;
		setTimeout(function(){
			if (failResult != null) {
				dfr.reject(failResult);
				return;
			}
			dfr.resolve(doneResult);
		});
		return dfr;
	}

	UTest({
		'pipe': function(done) {
			function getBase(){
				return createDfr('base_');
			}
			function getFoo(base) {
				return createDfr(base + 'foo');
			}
			function getFooBar(foo){
				return foo + 'bar';
			}
			
			getBase()
				.pipe(getFoo)
				.pipe(getFooBar)
				.done(function(base_foobar){
					eq_(base_foobar, 'base_foobar');
				})
				.fail(assert.avoid())
				.always(done);
		},
		'pipe errored': function(done) {
			function getBase(){
				return createDfr(null, 'base_');
			}
			function getFoo(base) {
				return createDfr(base + 'foo');
			}
			function getFooBar(foo){
				return foo + 'bar';
			}
			function getFooBarError(base_) {
				return createDfr(null, base_ + 'barerror');
			}
			
			getBase()
				.pipe(assert.avoid('should fail'), getFoo)
				.pipe(getFooBar, getFooBarError)
				.done(function(base_){
					eq_(base_, 'base_foobar');
				})
				.fail(assert.avoid())
				.always(done);
		},
		'pipe dfrs many': function(done){
			var avoid = assert.avoid();
			function getBase(){
				return createDfr(null, '1');
			}
			function concatDelegate(a, b){
				return function(x){
					if (a != null) 
						return createDfr(x + a);
					if (b != null) 
						return createDfr(null, x + b);
				}
			}
			
			var failed = new Deferred,
				resolved = new Deferred;
			getBase()
				.pipe(avoid)
				.pipe(avoid, concatDelegate('2'))
				.pipe(concatDelegate(null, '3'), avoid)
				.pipe(avoid, concatDelegate(null, '4'))
				.pipe(avoid, concatDelegate(null, '5'))
				.pipe(avoid, concatDelegate(null, '6'))
				.pipe(avoid, concatDelegate('7'))
				.pipe(concatDelegate('8'), avoid)
				.pipe(failed)
				.pipe(resolved);
				
			var xfailed = failed
				.pipe(concatDelegate('9'), avoid)
				.pipe(concatDelegate(null, '0'), avoid)
				.pipe(avoid, concatDelegate(null, 'a'))
				.fail(function(base_){
					eq_(base_, '1234567890a');
				})
				.done(assert.avoid());
				
			var xresolved = resolved
				.pipe(concatDelegate('a'), avoid)
				.pipe(concatDelegate(null, 'b'), avoid)
				.pipe(avoid, concatDelegate('c'))
				.done(function(base_){
					eq_(base_, '12345678abc');
				})
				.fail(assert.avoid());
				
			new Class.Await(
				xfailed,
				xresolved
			).always(done);
		}
	})
})